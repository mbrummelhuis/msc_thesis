<?xml version="1.0"?>
<launch>
  <!-- Version 2 launch file with the goal of being completely standalone -->
  <!-- launches MAVROS, PX4 SITL, Gazebo environment, and spawns vehicle -->
  
  <!-- vehicle model and world -->
  <arg name="est" default="ekf2"/>
  <arg name="vehicle" default="iris"/>
  <arg name="model" default = "iris"/>
  <arg name="world" default="~/msc_thesis/gazebo/worlds/my_world.world"/>
  <arg name="sdf" default="~/msc_thesis/gazebo/models/$(arg vehicle)/$(arg vehicle).sdf"/> Change model sdf ref
  <!-- vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="R" default="0"/>
  <arg name="P" default="0"/>
  <arg name="Y" default="0"/>  

  <!-- PX4 configs -->
  <arg name="interactive" default="true"/>
  <env name="PX4_SIM_MODEL" value="$(arg model)" />
  <env name="PX4_ESTIMATOR" value="$(arg est)" />
  <!-- PX4 SITL -->
  <arg unless="$(arg interactive)" name="px4_command_arg1" value="-d"/>
  <arg     if="$(arg interactive)" name="px4_command_arg1" value=""/>
  <node name="sitl" pkg="px4" type="px4" output="screen"
      args="$(find px4)/build/px4_sitl_default/etc -s etc/init.d-posix/rcS $(arg px4_command_arg1)"   required="true"/> How to direct this to the PX4 in the thesis repo?
      
  <!-- gazebo configs -->
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="paused" default="false"/>
  <arg name="respawn_gazebo" default="false"/>  
  <!-- Gazebo sim -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="gui" value="$(arg gui)"/>
      <arg name="world_name" value="$(arg world)"/>
      <arg name="debug" value="$(arg debug)"/>
      <arg name="verbose" value="$(arg verbose)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
  </include>
  
  <!-- Spawn model node -->
  <node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen" args="-sdf -file $(arg sdf) -model $(arg vehicle) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/>
  
  <!-- MAVROS configs (from node.launch) -->
	<arg name="fcu_url" default="udp://:14540@localhost:14557" />
	<arg name="gcs_url" default="" />
	<arg name="tgt_system" default="1" />
	<arg name="tgt_component" default="1" />
	<arg name="log_output" default="screen" />
	<arg name="fcu_protocol" default="v2.0" />
	<arg name="respawn_mavros" default="false" />
	<arg name="pluginlists_yaml" default="$(find mavros)/launch/px4_pluginlists.yaml" />
	<arg name="config_yaml" default="$(find mavros)/launch/px4_config.yaml" />

	<node pkg="mavros" type="mavros_node" name="mavros" required="$(eval not respawn_mavros)" clear_params="true" output="$(arg log_output)" respawn="$(arg respawn_mavros)">
		<param name="fcu_url" value="$(arg fcu_url)" />
		<param name="gcs_url" value="$(arg gcs_url)" />
		<param name="target_system_id" value="$(arg tgt_system)" />
		<param name="target_component_id" value="$(arg tgt_component)" />
		<param name="fcu_protocol" value="$(arg fcu_protocol)" />

		<!-- load blacklist, config -->
		<rosparam command="load" file="$(arg pluginlists_yaml)" />
		<rosparam command="load" file="$(arg config_yaml)" />
	</node>
</launch>
